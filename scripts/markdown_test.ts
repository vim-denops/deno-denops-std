import { assertEquals } from "https://deno.land/std@0.211.0/assert/mod.ts";

import { createMarkdownFromHelp } from "./markdown.ts";

Deno.test(createMarkdownFromHelp.name, async (t) => {
  for (
    const { name, args, expected } of [
      {
        name: "Replace TABs to spaces",
        args: [[
          "Foo",
          "\tBar",
          "  \tKeep tabstop=8",
          "  After chars\tkeeps tabstop.",
        ].join("\n")],
        expected: [
          "Foo",
          "        Bar",
          "        Keep tabstop=8",
          "  After chars   keeps tabstop.",
        ].join("\n"),
      },
      {
        name: "Remove entire indentation with the first line indentation",
        args: [[
          "   Foo",
          "   Bar",
          "  Keep indentation less than the delete width",
          "", // Keep blank lines
          "     Baz",
        ].join("\n")],
        expected: [
          "Foo",
          "Bar",
          "  Keep indentation less than the delete width",
          "", // Keep blank lines
          "  Baz",
        ].join("\n"),
      },
      {
        name: "Reindent code block",
        args: [[
          "  Avobe lines.",
          "    Previous line: >",
          "          Code block indented by previous line +4 spaces",
          "<      Between line: >",
          "          If the previous line is the only line",
          "          between code blocks, the indentation of the previous",
          "          code block is preserved.",
          "<",
          "       New Previous line: >",
          "          New indentation is used here.",
          "<      Between line: >",
          "  Original indentation of code block is ignored.",
          "< Next line...",
        ].join("\n")],
        expected: [
          "Avobe lines.",
          "  Previous line:",
          "",
          "      Code block indented by previous line +4 spaces",
          "",
          "     Between line:",
          "",
          "      If the previous line is the only line",
          "      between code blocks, the indentation of the previous",
          "      code block is preserved.",
          "",
          "     New Previous line:",
          "",
          "         New indentation is used here.",
          "",
          "     Between line:",
          "",
          "         Original indentation of code block is ignored.",
          "",
          "Next line...",
        ].join("\n"),
      },
      {
        name: "Trim trailing spaces",
        args: [[
          "Foo",
          "  Bar   ",
          "\t  \t",
          "    Baz\t\t",
          "In the code block: >",
          "  also removed\t ",
          "<  Out of code block too  ",
        ].join("\n")],
        expected: [
          "Foo",
          "  Bar",
          "",
          "    Baz",
          "In the code block:",
          "",
          "    also removed",
          "",
          "   Out of code block too",
        ].join("\n"),
      },
      {
        name: "Merge multiple blank lines to one",
        args: [[
          "Foo",
          "",
          "",
          "  Bar",
          "",
          "",
          "",
          "    Baz",
          "In the code block: >",
          "",
          "",
          "",
          "  also removed",
          "",
          "",
          "  leading or between or trailing",
          "",
          "",
          "<",
        ].join("\n")],
        expected: [
          "Foo",
          "",
          "  Bar",
          "",
          "    Baz",
          "In the code block:",
          "",
          "    also removed",
          "",
          "    leading or between or trailing",
        ].join("\n"),
      },
      {
        name: "Remove tags *...* without inline sentence",
        args: [[
          "\t\t*Foo()*",
          "Foo()",
          "\t*TagOnlyLineToBeBlank* ",
          "\tBar",
          "\tBaz *Baz*",
          "\tDo not removed inline *Qux*.",
          "In the code block: >",
          "    Do not removed here *Ham*",
          "<  But removed here *Spam*",
        ].join("\n")],
        expected: [
          "Foo()",
          "",
          "        Bar",
          "        Baz",
          "        Do not removed inline *Qux*.",
          "In the code block:",
          "",
          "    Do not removed here *Ham*",
          "",
          "   But removed here",
        ].join("\n"),
      },
      {
        name: "Remove header mark '... ~'",
        args: [[
          "Foo Bar ~",
          "\tBaz ~",
          "Not a trailing ~.",
          "No space~",
          "In the code block: >",
          "    Do not removed here ~",
          "<  But removed here ~",
        ].join("\n")],
        expected: [
          "Foo Bar",
          "        Baz",
          "Not a trailing `~`.", // See below rules
          "No `space~`", // See below rules
          "In the code block:",
          "",
          "    Do not removed here ~",
          "",
          "   But removed here",
        ].join("\n"),
      },
      {
        name: "Replace nvim list marker at beginning of line",
        args: [[
          "\u2022 Foo",
          "  \u2022 Bar",
          "\t\u2022 Baz",
          "  \u2022No after space",
          "  Do not replace with prefix \u2022",
          "In the code block: >",
          "    \u2022 Do not replace here",
          "<  \u2022 But replace here",
        ].join("\n")],
        expected: [
          "- Foo",
          "  - Bar",
          "        - Baz",
          "  \u2022No after space",
          "  Do not replace with prefix \u2022",
          "In the code block:",
          "",
          "    \u2022 Do not replace here",
          "",
          "   - But replace here",
        ].join("\n"),
      },
      {
        name: "Replace not-Vi attention {not...} to emphasis *not...*",
        args: [[
          "{not available when compiled without the |+byte_offset|",
          "feature}",
          "  foo {only for MS-Windows}",
          "barbaz {Vi",
          "   shortens a lot of messages} qux",
          " No replace {Vim is not a keyword}",
          " It is {Vi: contains *asterisk*}",
          "In the code block: >",
          "    {not replace here}",
          "<  But not {not replace here}",
        ].join("\n")],
        expected: [
          "*not available when compiled without the `+byte_offset`",
          "feature*",
          "  foo *only for MS-Windows*",
          "barbaz *Vi",
          "   shortens a lot of messages* qux",
          " No replace {Vim is not a keyword}",
          " It is _Vi: contains *asterisk*_",
          "In the code block:",
          "",
          "    {not replace here}",
          "",
          "   But not *not replace here*",
        ].join("\n"),
      },
      {
        name:
          'Replace quoted-string that contains `~< to code block ``"..`.."``',
        args: [[
          '"normal string"',
          '"with `"',
          '"with ~"',
          '"tag like <TAB>"',
          'inline " foo ` bar" sentence',
          'multi-lined "` in string,',
          'in string too." out of string',
          'between parens ("~")',
          'before punctuation "~".',
          "In the code block: >",
          '    Do not "` replace here"',
          '<  But "` replace here"',
        ].join("\n")],
        expected: [
          '"normal string"',
          '``"with `"``',
          '`"with ~"`',
          '`"tag like <TAB>"`',
          'inline ``" foo ` bar"`` sentence',
          'multi-lined ``"` in string,',
          'in string too."`` out of string',
          'between parens (`"~"`)',
          'before punctuation `"~"`.',
          "In the code block:",
          "",
          '    Do not "` replace here"',
          "",
          '   But ``"` replace here"``',
        ].join("\n"),
      },
      {
        name: "Replace special cases to code block `` a` ``",
        args: [[
          "v_aquote example a` becomes code block",
          "mark jump example `{A-Z0-9}, '{A-Z0-9} becomes code block",
          "In the code block: >",
          "    Do not a` replace here",
          "<  But a` replace here",
        ].join("\n")],
        expected: [
          "v_aquote example ``a` `` becomes code block",
          "mark jump example `` `{A-Z0-9}``, `'{A-Z0-9}` becomes code block",
          "In the code block:",
          "",
          "    Do not a` replace here",
          "",
          "   But ``a` `` replace here",
        ].join("\n"),
      },
      {
        name: "Replace link |...| to code block `...`",
        args: [[
          "|beginning| and |inline| and |trailing|",
          "Contains symbol |+link|",
          "Do not replaced if concatented|with|characters.",
          "Multiple bars ||link||| are allowd for typo.",
          "Do not replace if contains spaces |not link|",
          "Do not replace if empty ||",
          "Do not replace triple bar |||",
          "`Do not quote",
          "  |A| within quoted area.`",
          "|Here| is out of the quote area",
          "|A| `` Double quoted |B| `here is |C| in the area.` `` |D|",
          "In the code block: >",
          "    Do not |link| replace here",
          "<  But |link| replace here",
        ].join("\n")],
        expected: [
          "`beginning` and `inline` and `trailing`",
          "Contains symbol `+link`",
          "Do not replaced if concatented|with|characters.",
          "Multiple bars `link` are allowd for typo.",
          "Do not replace if contains spaces |not link|",
          "Do not replace if empty ||",
          "Do not replace triple bar |||",
          "`Do not quote",
          "  |A| within quoted area.`",
          "`Here` is out of the quote area",
          "`A` `` Double quoted |B| `here is |C| in the area.` `` `D`",
          "In the code block:",
          "",
          "    Do not |link| replace here",
          "",
          "   But `link` replace here",
        ].join("\n"),
      },
      {
        name: "Replace # at beginning of line to code block `#`",
        args: [[
          "# at beginning",
          "  # with indented spaces",
          "Do not quoted # inline",
          "  #trailing characters are aloso quoted",
          "`Do not quote",
          "  # within quoted area.`",
          "#Here is out of the quote area",
          "  # `` Double quoted",
          "  # `here is",
          "  # in the area.` ``",
          "  # out of area.",
          "In the code block: >",
          "    # Do not replace here",
          "<  # But replace here",
        ].join("\n")],
        expected: [
          "`#` at beginning",
          "  `#` with indented spaces",
          "Do not quoted # inline",
          "  `#trailing` characters are aloso quoted",
          "`Do not quote",
          "  # within quoted area.`",
          "`#Here` is out of the quote area",
          "  `#` `` Double quoted",
          "  # `here is",
          "  # in the area.` ``",
          "  `#` out of area.",
          "In the code block:",
          "",
          "    # Do not replace here",
          "",
          "   `#` But replace here",
        ].join("\n"),
      },
      {
        name: "Replace keycode <...> to code block `<...>`",
        args: [[
          "<at> the beginning of the document is removed.", // see above rule
          "<beginning> and <inline> and (<paren>) and <trailing>",
          "Quote together if continue <A><CTRL-C><D>.",
          "Do not quote if<A> concatented<BC>with <D>characters.",
          "Trailing 's' is allowed <TAB>s (<A>s). But <D>ss is not.",
          "Also quote empty tag <>.",
          "Do not quote if contains spaces <A B>.",
          "`Do not quote",
          "  <TAB> within quoted area.`",
          "<Here> is out of the quote area",
          "<A> `` Double quoted <B> `here is <C> in the area.` `` <D>",
          "In the code block: >",
          "    Do not <Key> replace here",
          "<  But <Key> replace here",
        ].join("\n")],
        expected: [
          " at> the beginning of the document is removed.", // see above rule
          "`<beginning>` and `<inline>` and (`<paren>`) and `<trailing>`",
          "Quote together if continue `<A><CTRL-C><D>`.",
          "Do not quote if<A> concatented<BC>with <D>characters.",
          "Trailing 's' is allowed `<TAB>`s (`<A>`s). But <D>ss is not.",
          "Also quote empty tag `<>`.",
          "Do not quote if contains spaces <A B>.",
          "`Do not quote",
          "  <TAB> within quoted area.`",
          "`<Here>` is out of the quote area",
          "`<A>` `` Double quoted <B> `here is <C> in the area.` `` `<D>`",
          "In the code block:",
          "",
          "    Do not <Key> replace here",
          "",
          "   But `<Key>` replace here",
        ].join("\n"),
      },
      {
        name: "Replace string that contains ~ to code block `..~..`",
        args: [[
          "Single ~ is quoted.",
          "~beginning and in~line",
          "header mark is removed before this method ~", // see below rule
          "line trailing~", // this is not a header mark
          "in the (paren~) or (~paren)",
          "Before the punctuation~.",
          "Inner dot is contained like.~this.",
          "`Do not quote",
          "  ~ within quoted area.`",
          "Here ~ is out of the quote area",
          "~ `` Double quoted ~ `here is ~ in the area.` `` ~.",
          "In the code block: >",
          "    Do not ~ replace here",
          "<  But ~ replace here",
        ].join("\n")],
        expected: [
          "Single `~` is quoted.",
          "`~beginning` and `in~line`",
          "header mark is removed before this method", // see below rule
          "line `trailing~`", // this is not a header mark
          "in the (`paren~`) or (`~paren`)",
          "Before the `punctuation~`.",
          "Inner dot is contained `like.~this`.",
          "`Do not quote",
          "  ~ within quoted area.`",
          "Here `~` is out of the quote area",
          "`~` `` Double quoted ~ `here is ~ in the area.` `` `~`.",
          "In the code block:",
          "",
          "    Do not ~ replace here",
          "",
          "   But `~` replace here",
        ].join("\n"),
      },
      {
        name: "Replace args {...} to strong emphasis **{...}**",
        args: [[
          "{beginning} and {inline} and ({paren}) and {trailing}",
          "Each is quote separately {Args}{expr}{FOO}.",
          "Quote even if{it} concatented{foo}with {bar}characters.",
          "Do not quote empty tag {}.",
          "Do not quote if contains spaces {A B}.",
          "`Do not quote",
          "  {expr} within quoted area.`",
          "{Here} is out of the quote area",
          "{A} `` Double quoted {B} `here is {C} in the area.` `` {D}",
          "In the code block: >",
          "    Do not {expr} replace here",
          "<  But {expr} replace here",
        ].join("\n")],
        expected: [
          "**{beginning}** and **{inline}** and (**{paren}**) and **{trailing}**",
          "Each is quote separately **{Args}****{expr}****{FOO}**.",
          "Quote even if**{it}** concatented**{foo}**with **{bar}**characters.",
          "Do not quote empty tag {}.",
          "Do not quote if contains spaces {A B}.",
          "`Do not quote",
          "  {expr} within quoted area.`",
          "**{Here}** is out of the quote area",
          "**{A}** `` Double quoted {B} `here is {C} in the area.` `` **{D}**",
          "In the code block:",
          "",
          "    Do not {expr} replace here",
          "",
          "   But **{expr}** replace here",
        ].join("\n"),
      },
    ] as Array<{
      name: string;
      args: Parameters<typeof createMarkdownFromHelp>;
      expected: ReturnType<typeof createMarkdownFromHelp>;
    }>
  ) {
    await t.step(name, () => {
      const actual = createMarkdownFromHelp(...args);
      assertEquals(actual, expected);
    });
  }
});
